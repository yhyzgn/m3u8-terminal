name: Go

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    tags: 
      - 'v*'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Built env
      id: date
      run: |
        echo "version=v$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
        echo "builtDate=$(TZ=UTC-8 date '+%Y-%m-%d')" >> $GITHUB_ENV
        
    - name: Test env
      run: echo ${{ env.version }}

    - name: Set up Go 1.15
      uses: actions/setup-go@v2
      with:
        go-version: 1.15

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build linux
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -o m3u8.linux -ldflags "-s -w -extldflags -static -X m3u8/built.Version=${{ env.version }} -X m3u8/built.BuildDate=${{ env.builtDate }}"

    - name: Build mac
      run: CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -v -o m3u8.mac -ldflags "-s -w -extldflags -static -X m3u8/built.Version=${{ env.version }} -X m3u8/built.BuildDate=${{ env.builtDate }}"

    - name: Build windows
      run: CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -v -o m3u8.exe -ldflags "-s -w -extldflags -static -X m3u8/built.Version=${{ env.version }} -X m3u8/built.BuildDate=${{ env.builtDate }}"
   
    - name: Gzip linux
      run: |
        mkdir m3u8-linux-amd64
        cp m3u8.linux m3u8-linux-amd64/m3u8
        cp settings.json m3u8-linux-amd64/settings.json
        tar -czvf m3u8-linux-amd64-${{ env.version }}.tar.gz m3u8-linux-amd64
        
    - name: Gzip mac
      run: |
        mkdir m3u8-mac-amd64
        cp m3u8.mac m3u8-mac-amd64/m3u8
        cp settings.json m3u8-mac-amd64/settings.json
        tar -czvf m3u8-mac-amd64-${{ env.version }}.tar.gz m3u8-mac-amd64
        
    - name: Gzip windows
      run: |
        mkdir m3u8-windows-amd64
        cp m3u8.exe m3u8-windows-amd64/m3u8.exe
        cp settings.json m3u8-windows-amd64/settings.json
        tar -czvf m3u8-windows-amd64-${{ env.version }}.tar.gz m3u8-windows-amd64
        
    - name: Create release
      id: createRelease
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.version }}
        release_name: ${{ env.version }}
        draft: true
        prerelease: false
    
    - name: Upload release asset of linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.createRelease.outputs.upload_url }}
        asset_path: ./m3u8-linux-amd64-${{ env.version }}.tar.gz
        asset_name: m3u8-linux-amd64-${{ env.version }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload release asset of mac
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.createRelease.outputs.upload_url }}
        asset_path: ./m3u8-mac-amd64-${{ env.version }}.tar.gz
        asset_name: m3u8-mac-amd64-${{ env.version }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload release asset of windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.createRelease.outputs.upload_url }}
        asset_path: ./m3u8-windows-amd64-${{ env.version }}.tar.gz
        asset_name: m3u8-windows-amd64-${{ env.version }}.tar.gz
        asset_content_type: application/gzip
        
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.createRelease.outputs.id }}
        
        
        
        
